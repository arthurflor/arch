title=" -| Arch Linux |- "
backtitle=" -| Arch Linux Installer |- "

config() {
    ARCH=/mnt
    bluetooth=false
    bootloader=false
    btrfs=true
    crypted=false
    desktop=false
    dhcp=true
    drm=false
    enable_bt=false
    enable_btrfs=false
    enable_bumblebee=false
    enable_cups=true
    enable_dm=false
    enable_f2fs=false
    enable_ftp=false
    enable_http=false
    enable_ssh=false
    frmt=false
    GPT=false
    GTK3=false
    input=default
    INSTALLED=false
    manual_part=default
    mounted=false
    multilib=false
    screen_h=true
    SWAP=false
    UEFI=false
    USB=none
    vfat=false
    VM=false
    wifi=false

    ### Custom packages and settings
    custom_pkg=custom_packages.sh

    ### Log and tmp files
    log=/tmp/arch-linux.log
    tmp_list=/tmp/part.list
    tmp_menu=/tmp/part.sh

    ### Set default shell
    sh=/bin/bash

    ### Added FS messages
    fs6="F2FS File System"

    ### Desktop messages
    de0="Xfce4 Light Desktop"
    de1="Mate Light Desktop"
    de2="LXDE Light Desktop"
    de3="LXQT Light Desktop"
    de4="Gnome Modern Desktop"
    de5="Cinnamon Desktop"
    de6="Kde Plasma Desktop"
    de7="Enlightenment Desktop"
    de8="Openbox Window Manager"
    de9="Awesome Window Manager"
    de10="i3 Tiling Window Manager"
    de11="Fluxbox Window Manager"
    de12="Dynamic Window Manager"
    de13="bspwm Window Manager"
    de14="Deepin Desktop"
    de15="WindowMaker Window Manager"
    de16="xmonad Window Manager"
    de17="Budgie Light Desktop"
    de18="Gnome Classic Desktop"

    ### Display managers
    dm0="GNOME Desktop Display Manager"
    dm1="Multi Desktop Display Manager"
    dm2="Lxdm Desktop Display Manager"
    dm3="Simple Desktop Display Manager"

    ### Shell
    shell0="DASH command shell (Debian Almquist shell)"
    shell1="Fish command shell (friendly interactive shell)"
    shell2="Korn command shell (mksh enhanced ksh)"
    shell3="tcsh/C command Shell (The C Shell)"
    shell4="Z-Shell command shell (Powerful & Feature rich)"
    shell5="Bourne again shell (Default Linux shell)"

    ### Check framebuffer line height
    if [ "$(tput lines)" -lt "25" ]; then 
        screen_h=false ;
    fi

    ### Check if install media is USB
    if (lsblk | grep "run" | grep -o "sd." &> /dev/null); then 
        USB=$(lsblk | grep "run" | grep -o "sd.")  ;
    fi

    ### Check for bluetooth device
    if (dmesg | grep -i "blue" &> /dev/null); then 
        bluetooth=true ;
    fi

    ### List of timezones
    zonelist=$(find /usr/share/zoneinfo -maxdepth 1 | sed -n -e 's!^.*/!!p' | grep -v "posix\|right\|zoneinfo\|zone.tab\|zone1970.tab\|W-SU\|WET\|posixrules\|MST7MDT\|iso3166.tab\|CST6CDT" | sort | sed 's/$/ -/g')

    ### Full list of locales
    localelist=$(grep -E "^#?[a-z].*UTF-8" /etc/locale.gen | sed 's/#//' | awk '{print $1" -"}')

    ### List of countries for mirrorlist update
    countries=$(echo -e "AS All-Https\n AT Austria\n AU  Australia\n BE Belgium\n BG Bulgaria\n BR Brazil\n BY Belarus\n CA Canada\n CL Chile \n CN China\n CO Colombia\n CZ Czech-Republic\n DE Germany\n DK Denmark\n EE Estonia\n ES Spain\n FI Finland\n FR France\n GB United-Kingdom\n HU Hungary\n IE Ireland\n IL Isreal\n IN India\n IT Italy\n JP Japan\n KR Korea\n KZ Kazakhstan\n LK Sri-Lanka\n LU Luxembourg\n LV Latvia\n MK Macedonia\n NC New-Caledonia\n NL Netherlands\n NO Norway\n NZ New-Zealand\n PL Poland\n PT Portugal\n RO Romania\n RS Serbia\n RU Russia\n SE Sweden\n SG Singapore\n SK Slovakia\n TR Turkey\n TW Taiwan\n UA Ukraine\n US United-States\n UZ Uzbekistan\n VN Viet-Nam\n ZA South-Africa")

    ### Full list of keymaps
    key_maps=$(find /usr/share/kbd/keymaps -type f | sed -n -e 's!^.*/!!p' | grep ".map.gz" | sed 's/.map.gz//g' | sed 's/$/ -/g')

    ### List of default mountpoints for manual partitioning
    points_orig=$(echo -e "/boot   boot-mountpoint>\n/home   home-mountpoint>\n/opt   opt-mountpoint>\n/srv   srv-mountpoint>\n/usr    usr-mountpoint>\n/var    var-mountpoint>")

    ### Check for laptop
    if (ls -1qA /sys/class/power_supply | grep -q .); 
        then LAPTOP=true ;
    fi

    ### Check for wifi network
    wifi_network=$(ip addr | grep "wlp" | awk '{print $2}' | sed 's/://' | head -n 1)
    if [ -n "$wifi_network" ]; then 
        wifi=true ; 
    fi

    ### Check system architecture
    arch=$(uname -a | grep -o "x86_64\|i386\|i686")

    ### Check for VM
    case $(systemd-detect-virt) in
        oracle) virt="vbox" VM=true
        ;;
        vmware) virt="vmware" VM=true
        ;;
        qemu) virt="qemu" VM=true
        ;;
        kvm) virt="kvm" VM=true
        ;;
        microsoft) virt="hyper-v" VM=true
        ;;
        xen) virt="xen" VM=true
        ;;
    esac

    ### Check VGA
    if ! "$VM" ; then
        if (lspci | grep VGA | grep "Intel" &>/dev/null); then
            default_GPU="xf86-video-intel" chipset="Intel"
        elif (lspci | grep VGA | grep "ATI\|AMD" &>/dev/null); then
            default_GPU="xf86-video-ati" chipset="AMD/ATI"
        elif (lspci | grep VGA | grep "NVIDIA\|nVidia" &>/dev/null); then
            NVIDIA=true default_GPU="xf86-video-nouveau" chipset="Nvidia"
        else
            default_GPU="xf86-video-vesa" chipset="Unknown"
        fi
    fi

    ### Pacman Hooks

    ### linux hook
    linux_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux

    [Action]
    When = PostTransaction"

    ### LTS linux hook
    lts_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-lts

    [Action]
    When = PostTransaction"

    ### Hardened linux hook
    hardened_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-hardened

    [Action]
    When = PostTransaction"

    ### Zen linux hook
    zen_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Type = Package
    Target = linux-zen

    [Action]
    When = PostTransaction"

    ### NVIDIA hook
    nvidia_hook="[Trigger]
    Operation = Install
    Operation = Upgrade
    Operation = Remove
    Type = Package
    Target = nvidia

    [Action]
    Depends = mkinitcpio
    When = PostTransaction"
}

config